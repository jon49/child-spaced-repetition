// Generated by LiveScript 1.2.0
var m, r, User, Controller;
m = require('mithril');
r = require('ramda');
User = require('./../models/user');
Controller = (function(){
  Controller.displayName = 'Controller';
  var prototype = Controller.prototype, constructor = Controller;
  function Controller(){
    var self;
    self = this;
    User.decks().then(function(data){
      self.decks = data;
    });
  }
  prototype.deckIndex = function(deckId){
    return r.findIndex(r.propEq('deckId', deckId))(
    this.decks);
  };
  prototype.editName = function(deckId){
    var editIndex;
    editIndex = this.deckIndex(deckId);
    return this.decks[editIndex].edit = true;
  };
  prototype.newName = function(deckId){
    var deckIndex, $edit, newName;
    deckIndex = this.deckIndex(deckId);
    $edit = document.getElementById('edit');
    newName = $edit ? $edit.value : '';
    switch (!!newName) {
    case true:
      User.changeDeckName(deckId, newName);
      this.decks[deckIndex].edit = false;
      this.decks[deckIndex].deckName = newName;
      break;
    default:
      User.deleteDeck(deckId);
      this.decks.splice(deckIndex, 1);
    }
  };
  prototype.editNewDeck = function(){
    return this.newDeck = true;
  };
  prototype.createDeck = function(){
    var self, $edit, deckName;
    self = this;
    this.newDeck = false;
    $edit = document.getElementById('edit');
    deckName = $edit ? $edit.value : '';
    switch (!!deckName) {
    case true:
      return User.createDeck(deckName).then(function(data){
        self.decks.push(data);
      });
    }
  };
  return Controller;
}());
module.exports = Controller;