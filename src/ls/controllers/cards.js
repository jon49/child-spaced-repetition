// Generated by LiveScript 1.2.0
var m, r, Deck, Controller;
m = require('mithril');
r = require('ramda');
Deck = require('./../models/deck');
Controller = (function(){
  Controller.displayName = 'Controller';
  var prototype = Controller.prototype, constructor = Controller;
  function Controller(){
    var self;
    this.deckId = m.route.param('id');
    self = this;
    Deck.cards(this.deckId).then(function(data){
      self.cards = data;
    });
  }
  prototype.cardIndex = function(cardId){
    return r.findIndex(r.propEq('cardId', cardId))(
    this.cards);
  };
  prototype.editName = function(cardId){
    var editIndex;
    editIndex = this.cardIndex(cardId);
    return this.cards[editIndex].edit = true;
  };
  prototype.newName = function(cardId){
    var cardIndex, $edit, newName;
    cardIndex = this.cardIndex(cardId);
    $edit = document.getElementById('edit');
    newName = $edit ? $edit.value : '';
    switch (!!newName) {
    case true:
      Deck.changeCardName(this.deckId, cardId, newName);
      this.cards[cardIndex].edit = false;
      this.cards[cardIndex].content = newName;
      break;
    default:
      Deck.deleteCard(this.deckId, cardId);
      this.cards.splice(cardIndex, 1);
    }
  };
  prototype.editNewCard = function(){
    return this.newCard = true;
  };
  prototype.createCard = function(){
    var self, $edit, content;
    self = this;
    this.newCard = false;
    $edit = document.getElementById('edit');
    content = $edit ? $edit.value : '';
    switch (!!content) {
    case true:
      return Deck.createCard(this.deckId, content).then(function(data){
        self.cards.push(data);
      });
    }
  };
  return Controller;
}());
module.exports = Controller;